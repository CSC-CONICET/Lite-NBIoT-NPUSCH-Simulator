stepper.py                  :  Main file, handles the multithreading simulation scheduling, and results storage.
pysimu.m                    : TopLevel matlab function. Matlab/python interface, calls runSimulation.m
runsimulation.m             : Estimates the bler for a specific IMCS, IREP, ISF and SNR combination.
nbiotLteRateMatchTurbo.m    : Implementation of the RateMatching for TurboEncoding without Code Block Segmentation support.
nbiotLteRateRecoverTurbo.m  : Implementation of the RateRecovery for TurboEncoding without Code Block Segmentation support.
hNPUSCHInfo.m               : Contains the standard paramenter definitions for the NPUSH channel encoding.

stepper.py uses an heuristic trying to minimize the simulation of trivial BLER values ( 0 or 1).
Edit NTHREADS variable to set the number of concurrent matlab instances.

Requirements:
Mathworks MATLAB LTE Toolbox and MATLAB Engine API for Python

Execution
Edit the Worker Class parameters on stepper.py function to set up the simulation ranges, and then run the script.

Output
A sqlite3 database is generated with the results.


This code was based on Mathworks NB-IoT NPDSCH Block Error Rate Simulation
https://www.mathworks.com/help/lte/examples/nb-iot-npdsch-block-error-rate-simulation.html
